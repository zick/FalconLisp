load regex

kLPar = '('
kRPar = ')'
kQuote = "'"

// Wrapper of a dictionary. This class is necessary for address comparison.
class L(tag, dict)
  tag_ = tag
  dict_ = dict
  function __getIndex(index)
    return self.dict_[index]
  end
  function __setIndex(index, value)
    self.dict_[index] = value
  end
  function tag()
    return self.tag_
  end
end

kNil = L('nil', ['data' => 'nil'])

function safeCar(obj)
  if obj.tag() == 'cons': return obj['car']
  return kNil
end

function safeCdr(obj)
  if obj.tag() == 'cons': return obj['cdr']
  return kNil
end

function makeError(str): return L('error', ['data' => str])

sym_table = [ => ]
function makeSym(str)
  global sym_table
  if str == 'nil': return kNil
  if str notin sym_table: sym_table[str] = L('sym', ['data' => str])
  return sym_table[str]
end

sym_t = makeSym('t')
sym_quote = makeSym('quote')
sym_if = makeSym('if')
sym_lambda = makeSym('lambda')
sym_defun = makeSym('defun')
sym_setq = makeSym('setq')
sym_loop = makeSym('loop')
sym_return = makeSym('return')
loop_val = kNil

function makeNum(num): return L('num', ['data' => num])

function makeCons(a, d): return L('cons', ['car' => a, 'cdr' => d])

function makeSubr(fn): return L('subr', ['data' => fn])

function makeExpr(args, env)
  return L('expr', ['args' => safeCar(args),
                    'body' => safeCdr(args),
                    'env' => env])
end

function nreverse(lst)
  ret = kNil
  while lst.tag() == 'cons'
    tmp = lst['cdr']
    lst['cdr'] = ret
    ret = lst
    lst = tmp
  end
  return ret
end

function pairlis(lst1, lst2)
  ret = kNil
  while lst1.tag() == 'cons' and lst2.tag() == 'cons'
    ret = makeCons(makeCons(lst1['car'], lst2['car']), ret)
    lst1 = lst1['cdr']
    lst2 = lst2['cdr']
  end
  return nreverse(ret)
end

function isDelimiter(c)
  return c == kLPar or c == kRPar or c == kQuote or Regex('\s+').match(c)
end

function skipSpaces(str): return Regex('^\s+').replace(str, '')

function makeNumOrSym(str)
  if Regex('^[+-]?\d+$').match(str)
    return makeNum(int(str))
  end
  return makeSym(str)
end

function readAtom(str)
  next = ''
  i = 0
  while (i < len(str))
    if isDelimiter(str[i])
      next = str[i:]
      str = str[:i]
      break
    end
    i++
  end
  return [makeNumOrSym(str), next]
end

function read(str)
  str = skipSpaces(str)
  if str == ''
    return [makeError('empty input'), '']
  elif str[0] == kRPar
    return [makeError('invalid syntax: ' + str), '']
  elif str[0] == kLPar
    return readList(str[1:])
  elif str[0] == kQuote
    [elm, next] = read(str[1:])
    return [makeCons(sym_quote, makeCons(elm, kNil)), next]
  end
  return readAtom(str)
end

function readList(str)
  ret = kNil
  while true
    str = skipSpaces(str)
    if str == ''
      return [makeError('unfinished parenthesis'), '']
    elif str[0] == kRPar
      break
    end
    [elm, next] = read(str)
    if elm.tag() == 'error': return [elm, '']
    ret = makeCons(elm, ret)
    str = next
  end
  return [nreverse(ret), str[1:]]
end

function printObj(obj)
  if obj.tag() == 'num' or obj.tag() == 'sym' or obj.tag() == 'nil'
    return obj['data'].toString()
  elif obj.tag() == 'error'
    return '<error: ' + obj['data'] + '>'
  elif obj.tag() == 'cons'
    return printList(obj)
  elif obj.tag() == 'subr' or obj.tag() == 'expr'
    return '<' + obj.tag() + '>'
  end
  return '<unknown>'
end

function printList(obj)
  ret = ''
  first = true
  while obj.tag() == 'cons'
    if first
      first = false
    else
      ret += ' '
    end
    ret += printObj(obj['car'])
    obj = obj['cdr']
  end
  if obj.tag() == 'nil': return '(' + ret + ')'
  return '(' + ret + ' . ' + printObj(obj) +')'
end

function findVar(sym, env)
  while env.tag() == 'cons'
    alist = env['car']
    while alist.tag() == 'cons'
      if alist['car']['car'] == sym: return alist['car']
      alist = alist['cdr']
    end
    env = env['cdr']
  end
  return kNil
end

g_env = makeCons(kNil, kNil)

function addToEnv(sym, val, env)
  env['car'] = makeCons(makeCons(sym, val), env['car'])
end

function eval(obj, env)
  if obj.tag() == 'nil' or obj.tag() == 'num' or obj.tag() == 'error'
    return obj
  elif obj.tag() == 'sym'
    bind = findVar(obj, env)
    if bind == kNil: return makeError(obj['data'] + ' has no value')
    return bind['cdr']
  end

  op = safeCar(obj)
  args = safeCdr(obj)
  if op == sym_quote
    return safeCar(args)
  elif op == sym_if
    c = eval(safeCar(args), env)
    if c.tag() == 'error'
      return c
    elif c == kNil
      return eval(safeCar(safeCdr(safeCdr(args))), env)
    end
    return eval(safeCar(safeCdr(args)), env)
  elif op == sym_lambda
    return makeExpr(args, env)
  elif op == sym_defun
    expr = makeExpr(safeCdr(args), env)
    sym = safeCar(args)
    addToEnv(sym, expr, g_env)
    return sym
  elif op == sym_setq
    val = eval(safeCar(safeCdr(args)), env)
    if val.tag() == 'error'
      return val
    end
    sym = safeCar(args)
    bind = findVar(sym, env)
    if bind == kNil
      addToEnv(sym, val, g_env)
    else
      bind['cdr'] = val
    end
    return val
  elif op == sym_loop
    return loop1(args, env)
  elif op == sym_return
    global loop_val
    loop_val = eval(safeCar(args), env)
    return makeError('')
  end
  return apply(eval(op, env), evlis(args, env), env)
end

function evlis(lst, env)
  ret = kNil
  while lst.tag() == 'cons'
    elm = eval(lst['car'], env)
    if elm.tag() == 'error': return elm
    ret = makeCons(elm, ret)
    lst = lst['cdr']
  end
  return nreverse(ret)
end

function progn(body, env)
  ret = kNil
  while body.tag() == 'cons'
    ret = eval(body['car'], env)
    if ret.tag() == 'error'
      return ret
    end
    body = body['cdr']
  end
  return ret
end

function loop1(body, env)
  while true
    ret = progn(body, env)
    if ret.tag() == 'error'
      if ret['data'] == ''
        return loop_val
      end
      return ret
    end
  end
end

function apply(fn, args, env)
  if fn.tag() == 'error'
    return fn
  elif args.tag() == 'error'
    return args
  elif fn.tag() == 'subr'
    return fn['data'](args)
  elif fn.tag() == 'expr'
    return progn(fn['body'], makeCons(pairlis(fn['args'], args), fn['env']))
  end
  return makeError('noimpl')
end

function subrCar(args): return safeCar(safeCar(args))

function subrCdr(args): return safeCdr(safeCar(args))

function subrCons(args): return makeCons(safeCar(args), safeCar(safeCdr(args)))

function subrEq(args)
  x = safeCar(args)
  y = safeCar(safeCdr(args))
  if x.tag() == 'num' and y.tag() == 'num'
    if x['data'] == y['data']
      return sym_t
    end
    return kNil
  elif x == y
    return sym_t
  end
  return kNil
end

function subrAtom(args)
  if safeCar(args).tag() == 'cons': return kNil
  return sym_t
end

function subrNumberp(args)
  if safeCar(args).tag() == 'num': return sym_t
  return kNil
end

function subrSymbolp(args)
  if safeCar(args).tag() == 'sym': return sym_t
  return kNil
end

function subrAddOrMul(fn, init_val): return function (args)
  ret = init_val
  while args.tag() == 'cons'
    if args['car'].tag() != 'num': return makeError('wrong type')
    ret = fn(ret, args['car']['data'])
    args = args['cdr']
  end
  return makeNum(ret)
end
subrAdd = subrAddOrMul({x, y => x + y}, 0)
subrMul = subrAddOrMul({x, y => x * y}, 1)

function subrSubOrDivOrMod(fn): return function(args)
  x = safeCar(args)
  y = safeCar(safeCdr(args))
  if x.tag() != 'num' or y.tag() != 'num': return makeError('wrong type')
  return makeNum(fn(x['data'], y['data']))
end
subrSub = subrSubOrDivOrMod({x, y => x - y})
subrDiv = subrSubOrDivOrMod({x, y => x / y})
subrMod = subrSubOrDivOrMod({x, y => x % y})

addToEnv(makeSym('car'), makeSubr(subrCar), g_env)
addToEnv(makeSym('cdr'), makeSubr(subrCdr), g_env)
addToEnv(makeSym('cons'), makeSubr(subrCons), g_env)
addToEnv(makeSym('eq'), makeSubr(subrEq), g_env)
addToEnv(makeSym('atom'), makeSubr(subrAtom), g_env)
addToEnv(makeSym('numberp'), makeSubr(subrNumberp), g_env)
addToEnv(makeSym('symbolp'), makeSubr(subrSymbolp), g_env)
addToEnv(makeSym('+'), makeSubr(subrAdd), g_env)
addToEnv(makeSym('*'), makeSubr(subrMul), g_env)
addToEnv(makeSym('-'), makeSubr(subrSub), g_env)
addToEnv(makeSym('/'), makeSubr(subrDiv), g_env)
addToEnv(makeSym('mod'), makeSubr(subrMod), g_env)
addToEnv(sym_t, sym_t, g_env)

print('> ')
while (line = stdIn().grabLine())
  printl(printObj(eval(read(line)[0], g_env)))
  print('> ')
end
